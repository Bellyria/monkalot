{
    "jtv_command": {
        "msg_standard": {
            "msg": "<3 {}, thank you for subbing with {} Welcome to the channel! <3",
            "info": "Message that gets posted when a viewer subscribes to the channel for the first time.",
            "args_info": {
                "user": "User who subribed to the channel.",
                "subplan": "Type of subscription (Twitch Prime, 4,99€, etc.)"
            }
        },
        "msg_with_months": {
            "msg": "PogChamp {}, thank you for subbing with {} Welcome back for {} years! PogChamp",
            "info": "Message that gets posted when a viewer resubscribes to the channel.",
            "args_info": {
                "user": "User who resubribed to the channel.",
                "subplan": "Type of subscription (Twitch Prime, 4,99€, etc.)",
                "months": "Amount of months the user is subscribed to the channel."
            }
        },
        "subplan": {
            "msg": {
                "Prime": "Twitch Prime!! SeemsGood",
                "1000": "4,99$!! VoHiYo",
                "2000": "9,99$!! FeelsGoodMan",
                "3000": "24,99$!! Jebaited"
            },
            "info": "Arguments for subscribtion/resubscription messages.",
            "args_info": ""
        }
    },
    "EmoteReply": {
        "call_reply": {
            "msg": "{} NOW {} THIS {} IS {} WHAT {} I {} CALL {}",
            "info": "Reply for '!call'-command. Followed by the text specified by the user.",
            "args_info": {
                "emote": "Emote that gets used in the call command."
            }
        }
    },
    "outputStats": {
        "total_reply": {
            "msg": "Total {} 's on this channel: {}",
            "info": "Reply for total emote count. ('!total <EMOTE>')",
            "args_info": {
                "emote": "Emote that user wants to get information about.",
                "count": "Total amount of emotes posted in this channel."
            }
        },
        "minute_reply": {
            "msg": "{} 's per minute: {}",
            "info": "Reply for emotes per minute count. ('!minute <EMOTE>')",
            "args_info": {
                "emote": "Emote that user wants to get information about.",
                "count": "Amount of emotes posted in the last minute in this channel."
            }
        }
    },
    "outputQuote": {
        "not_found": {
            "msg": "Quote not found. Try: !quote [1 - {}]",
            "info": "Reply if user specified a quote number that is not in the list.",
            "args_info": {
                "n_quotes": "Total amount of available quotes."
            }
        },
        "wrong_input": {
            "msg": "Wrong input for , try !quote <number>",
            "info": "Reply if user uses wrong kind of input for '!quote <NUMBER>'.",
            "args_info": {}
        }
    },
    "editQuoteList": {
        "quote_added": {
            "msg": "Quote has been added. FeelsGoodMan",
            "info": "Reply if a quote has been added. ('!addquote <QUOTE>')",
            "args_info": {}
        },
        "quote_exists": {
            "msg": "Quote is already in the list. :thinking:",
            "info": "Reply if user tries to add a quote that's already in the list.",
            "args_info": {}
        },
        "quote_removed": {
            "msg": "Quote has been removed. FeelsBadMan",
            "info": "Reply if a quote has been deleted. ('!delquote <QUOTE>')",
            "args_info": {}
        },
        "quote_not_found": {
            "msg": "Quote not found. :thinking:",
            "info": "Reply if user tries to remove a quote that's not in the list.",
            "args_info": {}
        }
    },
    "Calculator": {
        "div_by_zero": {
            "msg": "@{} AjhHdjsTmab beep boop can_not-Calcuasdjnasjd---SHUTTING DOWN....... Just kidding 4Head",
            "info": "Reply if user tries to devide by zero.",
            "args_info": {
                "user": "User who used the command."
            }
        },
        "number_overflow": {
            "msg": "@{} It's too big Kreygasm",
            "info": "Reply if the calculation yields a too large number.",
            "args_info": {
                "user": "User who used the command."
            }
        },
        "wrong_input": {
            "msg": "@{} ??? 4Head",
            "info": "Reply if wrong input in '!calc' command.",
            "args_info": {
                "user": "User who used the command."
            }
        }
    },
    "PyramidBlock": {
        "block_activate": {
            "msg": "Blocking pyramids now. monkaS",
            "info": "Write message if PyramidBlock gets activated.",
            "args_info": {}
        },
        "block_already_on": {
            "msg": "I'm already blocking pyramids. DansGame",
            "info": "Write message if user tries to activate PyramidBlock while it's already on.",
            "args_info": {}
        },
        "block_deactivate": {
            "msg": "No longer blocking pyramids. FeelsBadMan",
            "info": "Write message if PyramidBlock gets deactivated.",
            "args_info": {}
        },
        "block_already_off": {
            "msg": "I wasn't blocking pyramids. DansGame",
            "info": "Write message if user tries to deactivate PyramidBlock while it's not on.",
            "args_info": {}
        }
    },
    "Pyramid": {
        "pyramidblocks": {
            "msg": [
                "A pyramid (from Greek: πυραμίς pyramis)[1][2] is a structure whose outer surfaces are triangular and converge to a single point at the top, making the shape roughly a pyramid in the geometric sense.",
                "no 4Head",
                "Almost a pyramid PogChamp",
                "Not on my watch OpieOP",
                "Sorry, did I interrupt you? monkaS",
                "(⌐■_■)–︻╦╤─ TheIlluminati",
                "LUL"
            ],
            "info": "Pyramid block messages while PyramidBlock is on.",
            "args_info": {}
        },
        "plebpyramid": {
            "msg": "Wow, {} built a pleb pyramid and {} gets a free timeout. 4Head",
            "info": "Write message if a user completes a 3-part pyramid and gets timed-out.",
            "args_info": {
                "user": "User who built the pyramid.",
                "pronoun0": "Pronoun for the user."
            }
        },
        "mod_plebpyramid": {
            "msg": "{} created a pleb pyramid and would get a free timeout, but {} is a mod. FeelsBadMan",
            "info": "Write message if a channel moderator completes a 3-part pyramid.",
            "args_info": {
                "user": "User who built the pyramid.",
                "pronoun0": "Pronoun for the user."
            }
        },
        "multi_plebpyramid": {
            "msg": "Wow, {} built a pleb pyramid and they all get a free timeout. 4Head",
            "info": "Write message if multiple users complete a 3-part pyramid and get timed-out.",
            "args_info": {
                "mulitusers": "Users who built the pyramid together."
            }
        },
        "pyramid": {
            "msg": "{} built a pyramid and {} gets {} spam points. PogChamp",
            "info": "Write message if a user completes a 5-part pyramid and gets points as reward.",
            "args_info": {
                "user": "User who built the pyramid.",
                "pronoun0": "Pronoun for the user.",
                "amount": "Amount of points the user gets for completing the pyramid."
            }
        },
        "multi_pyramid": {
            "msg": "Teamwork! PogChamp {} built a pyramid. They get {} spam points. KappaClaus",
            "info": "Write message if multiple users complete a 5-part pyramid and get points as reward.",
            "args_info": {
                "multiusers": "Users who built the pyramid together.",
                "amount": "Amount of points the user gets for completing the pyramid."
            }
        }
    },
    "KappaGame": {
        "start_msg": {
            "msg": "/me ▬▬▬▬▬▬▬▬▬▬▬ஜ۩۞۩ஜ▬▬▬▬▬▬▬▬▬▬▬ Kappa game has started. Guess the right amount of Kappa s between 1 and 25! PogChamp ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬",
            "info": "Announce the start of the KappaGame.",
            "args_info": {}
        },
        "stop_msg": {
            "msg": "Stopping the Kappa game! FeelsBadMan",
            "info": "Write message if the KappaGame gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me {} got it! It was {} Kappa s!",
            "info": "Write message if a user wins the Kappa game and gets points as reward.",
            "args_info": {
                "user": "User who won the KappaGame.",
                "amount": "Right amount of Kappa's to win the game."
            }
        },
        "wrong_amount": {
            "msg": "It's not {}. 4Head",
            "info": "Write the message if user guesses the wrong amount of Kappas.",
            "args_info": {
                "amount": "Wrong amount of Kappa's input by the user."
            }
        }
    },
    "GuessEmoteGame": {
        "start_msg": {
            "msg": "/me The 'Guess The Emote Game' has started. Write one of the following emotes to start playing: {}",
            "info": "Announce the start of the GuessEmoteGame.",
            "args_info": {
                "multiemotes": "Possible emotes for the GuessEmoteGame."
            }
        },
        "stop_msg": {
            "msg": "Stopping the Emote Game! FeelsBadMan",
            "info": "Write message if the GuessEmoteGame gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me {} got it! It was {} . {} gets {} spam points.",
            "info": "Write message if a user wins the GuessEmoteGame and gets points as reward.",
            "args_info": {
                "user": "User who won the GuessEmoteGame.",
                "emote": "Right emote to win the GuessEmoteGame",
                "pronoun0": "Pronoun0 of the user.",
                "amount": "Amount of points the user gets for winning the game."
            }
        },
        "emote_msg": {
            "msg": "Possible game emotes: {}",
            "info": "Reply possible emotes for the game on '!emotes' command while the game is running.",
            "args_info": {
                "multiemotes": "Possible emotes for the GuessEmoteGame."
            }
        }
    },
    "GuessMinionGame": {
        "clue_stat": {
            "msg": "/me The minion is a {} card.",
            "info": "Give clue about the class of the card.",
            "args_info": {
                "stat": "Class of the card."
            }
        },
        "clue_set": {
            "msg": "/me The card is from the {} set.",
            "info": "Give clue from which set the card is from.",
            "args_info": {
                "stat": "The set in which the card was released."
            }
        },
        "setnames": {
            "msg": {
                "EXPERT1": "CLASSIC",
                "CORE": "CLASSIC",
                "HOF": "CLASSIC",
                "OG": "Whispers of the Old Gods",
                "GANGS": "Mean Streets of Gadgetzan",
                "KARA": "One Night in Karazhan",
                "ICECROWN": "Knights of the Frozen Throne",
                "TGT": "The Grand Tournament",
                "BRM": "Blackrock Mountain",
                "UNGORO": "Journey to Un'Goro",
                "NAXX": "Curse of Naxxramas",
                "GVG": "Goblins vs Gnomes",
                "LOE": "The League of Explorers"
            },
            "info": "Hearthstone set name conversion.",
            "args_info": {}
        },
        "clue_letter": {
            "msg": "/me The name of the card starts with '{}'.",
            "info": "Give the first letter of the minion's name as clue.",
            "args_info": {
                "stat": "The first letter of the name of the minion."
            }
        },
        "clue_rarity": {
            "msg": "/me The minion is a '{}' card.",
            "info": "Give clue about the rarity of the card.",
            "args_info": {
                "stat": "Rarity of the card."
            }
        },
        "clue_attackpower": {
            "msg": "/me The minion has {} attackpower.",
            "info": "Give clue about the attackpower of the minion.",
            "args_info": {
                "stat": "Attackpower of the minion."
            }
        },
        "clue_manacost": {
            "msg": "/me The card costs {} mana.",
            "info": "Give clue about the manacosts of the minion.",
            "args_info": {
                "stat": "Manacosts of the minion."
            }
        },
        "clue_healthpoints": {
            "msg": "/me The minion has {} healthpoint{}.",
            "info": "Give clue about the healthpoints of the minion.",
            "args_info": {
                "stat": "Healthpoints of the minion.",
                "plural": "Add an 's' if stat > 1"
            }
        },
        "start_msg": {
            "msg": "/me ▬▬▬▬▬▬▬▬▬▬▬ஜ۩۞۩ஜ▬▬▬▬▬▬▬▬▬▬▬ The 'Guess The Minion Game' has started. Type minion names to play. monkaS ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬",
            "info": "Announce the start of the GuessMinionGame.",
            "args_info": {}
        },
        "stop_msg": {
            "msg": "Stopping the Minion Game! FeelsBadMan",
            "info": "Write message if the GuessMinionGame gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me {} got it! It was {}. {} gets {} spam points.",
            "info": "Write message if a user wins the GuessMinionGame and gets points as reward.",
            "args_info": {
                "user": "User who won the GuessMinionGame.",
                "minion": "Right minion name to win the GuessMinionGame",
                "pronoun0": "Pronoun0 of the user.",
                "amount": "Amount of points the user gets for winning the game."
            }
        }
    },
    "AutoGames": {
        "autogames_activate": {
            "msg": "AUTOMATIC GAME MODE ACTIVATED! MrDestructoid",
            "info": "Write message if AutoGames get activated.",
            "args_info": {}
        },
        "autogames_already_on": {
            "msg": "Automatic games are already on! DansGame",
            "info": "Write message if user tries to activate AutoGames while it's already on.",
            "args_info": {}
        },
        "autogames_deactivate": {
            "msg": "Automatic game mode deacti... ResidentSleeper",
            "info": "Write message if AutoGames get deactivated.",
            "args_info": {}
        },
        "autogames_already_off": {
            "msg": "Automatic games were not even active! EleGiggle",
            "info": "Write message if user tries to deactivate AutoGames while they're not on.",
            "args_info": {}
        }
    },
    "Active": {
        "msg_active_users": {
            "msg": "{}: There is {} active user{} in chat.",
            "info": "Return the amount of active users in chat.",
            "args_info": {
                "user": "User who used the '!active' command.",
                "amount": "Amount of active users.",
                "plural": "Add an 's' if amount > 1"
            }
        }
    },
    "Pronouns": {
        "pronoun_added": {
            "msg": "Successfully added pronouns monkaS .",
            "info": "Message after a set of pronouns have been added for a user.",
            "args_info": {}
        }
    },
    "Rank": {
        "pronoun_added": {
            "msg": "{} is rank {} with {} spampoints. monkaS",
            "info": "Display the rank and points of the user.",
            "args_info": {
                "user": "User whose rank and points are displayed.",
                "rank": "Rank of the user.",
                "points": "Points of the user."
            }
        }
    },
    "TopSpammers": {
        "heading": {
            "msg": "Top spammers: ",
            "info": "Heading of the topspammers command.",
            "args_info": {}
        }
    },
    "Sleep": {
        "bot_deactivate": {
            "msg": "Going to sleep... bye! ResidentSleeper",
            "info": "Display message when bot gets deactivated.",
            "args_info": {}
        },
        "bot_activate": {
            "msg": "Good morning everyone! FeelsGoodMan /",
            "info": "Display message when bot gets activated.",
            "args_info": {}
        }
    },
    "startGame": {
        "points_needed": {
            "msg": "You need {} points to start a game.",
            "info": "Show message if a user wants to start a game but doesn't have enough points.",
            "args_info": {
                "amount": "Amount of points needed to start a game."
            }
        },
        "plebgames_on_cooldown": {
            "msg": "Only mods can start chatgames for another {} seconds. monkaS",
            "info": "Show message if a non-mod user wants to start a game while the plebgames are still on cooldown.",
            "args_info": {
                "cooldown": "Time until plebgames are available again."
            }
        }
    },
    "Oralpleasure": {
        "op_already_on": {
            "msg": "Oralpleasure is already on! Jebaited",
            "info": "Show message if someone tries to activate op while it's already on.",
            "args_info": {}
        },
        "op_activate": {
            "msg": "Oralpleasure is now on! Kreygasm",
            "info": "Display message when op gets activated.",
            "args_info": {}
        },
        "op_deactivate": {
            "msg": "Oralpleasure is now off! FeelsBadMan",
            "info": "Display message when op gets deactivated.",
            "args_info": {}
        },
        "op_already_off": {
            "msg": "Oralpleasure was already off! monkaS",
            "info": "Show message if someone tries to deactivate op while it's already off.",
            "args_info": {}
        }
    },
    "MonkalotParty": {
        "game_over1": {
            "msg": "Monkalot Party is over! ",
            "info": "Part 1 of the message that gets displayed when MonkalotParty is over.",
            "args_info": {}
        },
        "game_over2": {
            "msg": "There was no clear winner ... FeelsBadMan",
            "info": "Part 2 of the message that gets displayed when MonkalotParty is over and there is no clear winner.",
            "args_info": {}
        },
        "game_over3": {
            "msg": "got 1st place with {} points and get {} extra spampoints! PogChamp Clap",
            "info": "Part 2 of the message that gets displayed when MonkalotParty is over and there are one or more winners.",
            "args_info": {
                "game_points": "Amount of games the winner/s won in MonkalotParty.",
                "user_points": "Amount of points the users get for getting 1st place in MonkalotParty."
            }
        },
        "start_msg": {
            "msg": "/me ▬▬▬▬▬▬▬▬▬▬▬ஜ۩۞۩ஜ▬▬▬▬▬▬▬▬▬▬▬ PepePls PogChamp MONKALOTPARTY HAS STARTED ! Jebaited PepePls Kappa gachiGASM PepePls FeelsGoodMan 4Head EZ Clap PepePls LUL Kreygasm FeelsBadMan ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ monkaS Get ready for games in 5 ... 4 ... 3 ... 2 ... 1 ... monkaS",
            "info": "Announce the start of the MonkalotParty.",
            "args_info": {}
        },
        "stop_msg": {
            "msg": "Stopping Monkalot Party! FeelsBadMan",
            "info": "Write message if the MonkalotParty gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me {} got it first and gets 5 points. The answer was: {}",
            "info": "Write message if a user wins a minigame in MonkalotParty and gets points as reward.",
            "args_info": {
                "user": "User who won the minigame.",
                "answer": "Right answer to the minigame."
            }
        }
    },
    "ranking": {
        "msg_legend": {
            "msg": "{} just reached {}!! PogChamp Clap",
            "info": "Display if a user reaches legend rank for the first time.",
            "args_info": {
                "user": "User who just reached legend.",
                "rank": "Legend Rank of the user."
            }
        }
    }
}
